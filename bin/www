#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('odinbook-api:server');
var http = require('http');
const { Server } = require('socket.io');
const mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Attaching socket.io to the server instance.
 */

const Chat = require('../models/chat');
const Message = require('../models/message');

const io = new Server(server, {
	cors: { origin: process.env.CLIENT_URI },
});

const connected_client_list = [];

const all_new_messages_data = [];

io.on('connection', (socket) => {
	socket.channelId = '';

	socket.on('open_chat', async (participants) => {
		try {
			const theChat = await Chat.findOne({ participants: participants })
				.populate({
					path: 'message_list',
					populate: {
						path: 'author',
					},
				})
				.exec();
			if (!theChat) {
				const newChat = new Chat({ participants });
				const chat = await newChat.save();
				socket.channelId = chat._id.toString();
				socket.emit('load_chat', chat);
			} else {
				socket.channelId = theChat._id.toString();
				socket.emit('load_chat', theChat);
			}
			socket.join(socket.channelId);
		} catch (error) {
			socket.emit('oops', 'Chat error');
			console.log(error);
		}
	});

	socket.on('send_message', async (data) => {
		try {
			const newMessage = new Message({
				chat_ref: data.chatId,
				author: data.userId,
				text: data.string,
			});
			const message = await newMessage.save();
			const chat = await Chat.findByIdAndUpdate(
				data.chatId,
				{
					$addToSet: { message_list: message._id },
				},
				{ new: true }
			)
				.populate({
					path: 'message_list',
					populate: {
						path: 'author',
					},
				})
				.exec();
			io.to(socket.channelId).emit('receive_message', chat);
		} catch (error) {
			socket.emit('oops', 'Chat error');
			console.log(error);
		}
	});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}
